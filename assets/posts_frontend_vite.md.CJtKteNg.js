import{_ as t,c as l,a2 as a,o as r}from"./chunks/framework.DjBDZHqN.js";const o="/assets/bundle.-eUwNnmQ.png",i="/assets/native-ems.lEq2JHZc.png",s="/assets/esbuild.HEo0bVr9.png",n="/assets/esbuild-pipeline.AUGZ41a1.png",f=JSON.parse('{"title":"Vite 初步理解","description":"Vite 构建，区别，插件系统","frontmatter":{"date":"2024-09-01T00:00:00.000Z","title":"Vite 初步理解","category":"vite","tags":["vite"],"description":"Vite 构建，区别，插件系统"},"headers":[],"relativePath":"posts/frontend/vite.md","filePath":"posts/frontend/vite.md"}'),u={name:"posts/frontend/vite.md"};function d(p,e,h,c,b,g){return r(),l("div",null,e[0]||(e[0]=[a('<h1 id="vite-初步理解" tabindex="-1">Vite 初步理解 <a class="header-anchor" href="#vite-初步理解" aria-label="Permalink to &quot;Vite 初步理解&quot;">​</a></h1><h2 id="组成" tabindex="-1">组成 <a class="header-anchor" href="#组成" aria-label="Permalink to &quot;组成&quot;">​</a></h2><blockquote><p>vite 是一种新型前端构建工具，能够显著提升前端开发体验。它主要由两部分组成：</p><ul><li>一个开发服务器，它基于 原生 ES 模块 提供了 丰富的内建功能，如速度快到惊人的 <a href="https://cn.vitejs.dev/guide/features.html#hot-module-replacement/" target="_blank" rel="noreferrer">模块热更新（HMR）</a>。</li><li>一套构建指令，它使用 <a href="https://rollupjs.org//" target="_blank" rel="noreferrer">Rollup</a> 打包你的代码，并且它是预配置的，可输出用于生产环境的高度优化过的静态资源。</li></ul></blockquote><p>vite 主要是用于开发环境，提高我们在开发环境构建项目的速度，vite 在开发环境下使用 <strong>ESBuild</strong>，这个库在开发环境时进行文件编译，这个工具的性能比传统的 webpack，rollup 性能要高很多。</p><p>而在生产环境下，vite 使用 rollup 进行打包，所以其在生产环境下就相当于是 rollup。</p><h2 id="区别" tabindex="-1">区别 <a class="header-anchor" href="#区别" aria-label="Permalink to &quot;区别&quot;">​</a></h2><ol><li>vite 本身不包含编译能力，它的编译能力是源自于 esbuild 和 rollup，它只是集成了 rollup 的功能，然后启动了 dev-server，在中间进行串联和管理</li></ol><h2 id="优势" tabindex="-1">优势 <a class="header-anchor" href="#优势" aria-label="Permalink to &quot;优势&quot;">​</a></h2><ol><li>依赖预构建，将AMD，UMD，IIFE，commonjs 等转成 es module 形式，对依赖进行强缓存，并缓存在node_module/.vite下，加快服务构建。</li><li>兼容 rollup 插件，vite 天生就支持所有的 rollup 插件，采用 rollup 插件的使用格式，对理解插件，建立一个插件更简单</li><li>提供基于 ESM 的 HMR API，比传统的 HMR 过程更简单，反映更迅速。</li><li>使用 esbuild 转译 ts，tsx，jsx，转译迅速，约是 tsc 速度的 20~30 倍。</li><li>内部构建了 css 预处理器，tsx，jsx，postCss，css Module 的支持，不用用户配置，开箱即用。</li></ol><h2 id="构建方式" tabindex="-1">构建方式 <a class="header-anchor" href="#构建方式" aria-label="Permalink to &quot;构建方式&quot;">​</a></h2><blockquote><p>Vite 通过在一开始将应用中的模块区分为 <strong>依赖</strong> 和 <strong>源码</strong> 两类，改进了开发服务器启动时间。</p><ul><li><strong>依赖</strong> 大多为在开发时不会变动的纯 JavaScript。一些较大的依赖（例如有上百个模块的组件库）处理的代价也很高。依赖也通常会存在多种模块化格式（例如 ESM 或者 CommonJS）。 Vite 将会使用 esbuild 预构建依赖。<strong>Esbuild</strong> 使用 Go 编写，并且比以 JavaScript 编写的打包器预构建依赖快 10-100 倍。</li><li><strong>源码</strong> 通常包含一些并非直接是 JavaScript 的文件，需要转换（例如 JSX，CSS 或者 Vue/Svelte 组件），时常会被编辑。同时，并不是所有的源码都需要同时被加载（例如基于路由拆分的代码模块）。 Vite 以 原生 ESM 方式提供源码。这实际上是让浏览器接管了打包程序的部分工作：Vite 只需要在浏览器请求源码时进行转换并按需提供源码。根据情景动态导入代码，即只在当前屏幕上实际使用时才会被处理。</li></ul></blockquote><p><img src="'+o+'" alt="An image"></p><p><img src="'+i+'" alt="An image"></p><h2 id="vite-架构解析" tabindex="-1">Vite 架构解析 <a class="header-anchor" href="#vite-架构解析" aria-label="Permalink to &quot;Vite 架构解析&quot;">​</a></h2><p>Vite 底层所深度使用的两个构建引擎：<strong>Esbuild</strong>和 <strong>Rollup</strong></p><h3 id="esbuild" tabindex="-1">Esbuild <a class="header-anchor" href="#esbuild" aria-label="Permalink to &quot;Esbuild&quot;">​</a></h3><h4 id="作为-bundler-打包工具-进行依赖预构建" tabindex="-1">作为 Bundler 打包工具，进行依赖预构建 <a class="header-anchor" href="#作为-bundler-打包工具-进行依赖预构建" aria-label="Permalink to &quot;作为 Bundler 打包工具，进行依赖预构建&quot;">​</a></h4><p>一般来说，node_modules 依赖的大小动辄几百 MB 甚至上 GB ，会远超项目源代码，相信大家都深有体会。如果这些依赖直接在 Vite 中使用，会出现一系列的问题，这些问题我们在依赖预构建的小节已经详细分析过，主要是 ESM 格式的兼容性问题和海量请求的问题。 总而言之，对于第三方依赖，需要在应用启动前使用 Esbuild 进行<strong>打包</strong>并且转换为 <strong>ESM 格式</strong>。</p><p><img src="'+s+'" alt="An image"></p><h4 id="作为-ts-和-jsx-编译工具-进行单文件编译" tabindex="-1">作为 TS 和 JSX 编译工具，进行单文件编译 <a class="header-anchor" href="#作为-ts-和-jsx-编译工具-进行单文件编译" aria-label="Permalink to &quot;作为 TS 和 JSX 编译工具，进行单文件编译&quot;">​</a></h4><p>在依赖预构建阶段， Esbuild 作为 <strong>Bundler</strong> 的角色存在。而在 TS(X)/JS(X) 单文件编译上面，Vite 也使用 Esbuild 进行语法转译，也就是将 Esbuild 作为 <strong>Transformer</strong> 来用。</p><p><img src="'+n+'" alt="An image"></p><h4 id="rollup-构建" tabindex="-1">Rollup 构建 <a class="header-anchor" href="#rollup-构建" aria-label="Permalink to &quot;Rollup 构建&quot;">​</a></h4><p>Rollup 在 Vite 中的重要性一点也不亚于 Esbuild，它既是 Vite 用作生产环境打包的核心工具，也直接决定了 Vite 插件机制的设计。</p><h1 id="生产环境-bundle" tabindex="-1">生产环境 Bundle <a class="header-anchor" href="#生产环境-bundle" aria-label="Permalink to &quot;生产环境 Bundle&quot;">​</a></h1><p>虽然 ESM 已经得到众多浏览器的原生支持，但生产环境做到完全 no-bundle 也不行，会有网络性能问题。 所以，为了在生产环境中也能取得优秀的产物性能，<strong>Vite 默认选择在生产环境中利用 Rollup 打包，并基于 Rollup 本身成熟的打包能力进行扩展和优化</strong>。</p>',26)]))}const v=t(u,[["render",d]]);export{f as __pageData,v as default};
